#include <WiFi.h>
#include <ESPAsyncWebServer.h>
#include <MotorController.h>

DCMotorController motor1 = DCMotorController(14, 26, 27);
const int ledPin = 2;

int pwmValue = 0;
bool motorOn = false;     // Motor status

const char* SSID = "SP_Zone_S10";
const char* PASSWORD = "3206@Spzone";

// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(115200);

  // Connect to WiFi
  WiFi.begin(SSID, PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");
  Serial.println(WiFi.localIP());

  // Define Web Server routes
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "Motor Controller Connected!");
  });

  server.on("/motor/on", HTTP_GET, [](AsyncWebServerRequest *request){
    if (request->hasParam("value")) {
      pwmValue = request->getParam("value")->value().toInt();
      motorOn = true;
      motor1.forward(pwmValue);
      digitalWrite(ledPin, HIGH);  // Turn on the LED
      request->send(200, "text/plain", "Motor On");
    } else {
      request->send(400, "text/plain", "Missing PWM value");
    }
  });

  server.on("/motor/off", HTTP_GET, [](AsyncWebServerRequest *request){
    motorOn = false;
    pwmValue = 0;
    motor1.brake();
    digitalWrite(ledPin, LOW);  // Turn off the LED
    request->send(200, "text/plain", "Motor Off");
  });

  server.on("/motor/pwm", HTTP_GET, [](AsyncWebServerRequest *request){
    if (motorOn) {
      if (request->hasParam("value")) {
        pwmValue = request->getParam("value")->value().toInt();
        if (pwmValue < 0) pwmValue = 0;
        if (pwmValue > 255) pwmValue = 255;
        motor1.forward(pwmValue);
        Serial.println("PWM set to " + String(pwmValue));
        request->send(200, "text/plain", "PWM set to " + String(pwmValue));
      } else {
        request->send(400, "text/plain", "Missing PWM value");
      }
    } else {
      request->send(400, "text/plain", "Motor is Off");
    }
  });

  server.on("/motor/status", HTTP_GET, [](AsyncWebServerRequest *request){
    String statusMessage = "{ \"motorOn\": " + String(motorOn ? "true" : "false") +
                           ", \"pwmValue\": " + String(pwmValue) + " }";
    request->send(200, "application/json", statusMessage);
  });

  // Start server
  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  // Nothing needed here for ESPAsyncWebServer, it runs asynchronously
}
