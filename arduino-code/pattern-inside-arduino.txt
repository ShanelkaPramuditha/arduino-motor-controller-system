#include <WiFi.h>
#include <WebServer.h>
#include <MotorController.h>

DCMotorController motor1 = DCMotorController(14, 26, 27);
const int ledPin = 2;

int pwmValue = 50;
int currentPattern = 0;   // Keep track of the active pattern
bool motorOn = false;     // Motor status

const char* SSID = "SP_Zone_S10";
const char* PASSWORD = "3206@Spzone";

WebServer server(80);

void setup() {
  pinMode(ledPin, OUTPUT);
  Serial.begin(115200);     // Initialize serial communication at 115200 baud rate

  // Connect to WiFi
  WiFi.begin(SSID, PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi!");
  Serial.println(WiFi.localIP());

  // Define Web Server routes
  server.on("/", handleRoot);
  server.on("/motor/on", handleMotorOn);  // Single route for on
  server.on("/motor/off", handleMotorOff);  // Single route for off
  server.on("/motor/pwm", handlePwmChange);  // Add route to handle PWM change
  server.on("/motor/pattern", handlePatternChange); // Add route to change pattern

  server.begin();
  Serial.println("HTTP server started");
}

void loop() {
  server.handleClient();
  if (motorOn) {
    runPattern(currentPattern);  // Run the selected pattern
  } else {
    offAll();
  }
  delay(10);
}

// HTTP route handlers
void handleRoot() {
  server.send(200, "text/plain", "Motor Controller Connected!");
}

// Motor on/off
void handleMotorOn() {
  motorOn = true;
  server.send(200, "text/plain", "Motor On");
}

void handleMotorOff() {
  currentPattern = 0;
  motorOn = false;
  offAll();
  server.send(200, "text/plain", "Motor Off");
}

// Change PWM via HTTP
void handlePwmChange() {
  if (server.hasArg("value")) {
    pwmValue = server.arg("value").toInt();
    if (pwmValue < 0) pwmValue = 0;
    if (pwmValue > 255) pwmValue = 255;
    Serial.println("PWM set to " + String(pwmValue));
    server.send(200, "text/plain", "PWM set to " + String(pwmValue));
  } else {
    server.send(400, "text/plain", "Missing PWM value");
  }
}

// Change pattern via HTTP
void handlePatternChange() {
  if (server.hasArg("pattern")) {
    int pattern = server.arg("pattern").toInt();
    if (pattern >= 1 && pattern <= 5) {
      currentPattern = pattern;
      server.send(200, "text/plain", "Pattern set to " + String(currentPattern));
    } else {
      server.send(400, "text/plain", "Invalid pattern");
    }
  } else {
    server.send(400, "text/plain", "Missing pattern value");
  }
}

// Run selected pattern dynamically
void runPattern(int pattern) {
  switch (pattern) {
    case 1:
      pattern1();
      break;
    case 2:
      pattern2();
      break;
    case 3:
      pattern3();
      break;
    case 4:
      pattern4();
      break;
    case 5:
      pattern5();
      break;
    default:
      noPattern();  // If no valid pattern, just run motor without pattern
  }
}

// Patterns
void pattern1() {
  int lowSpeed = 50;
  int pulseDuration = 200;

  motor1.forward(pwmValue); // Use global pwmValue
  delay(pulseDuration);
  motor1.forward(lowSpeed);
  delay(pulseDuration);
}

void pattern2() {
  for (int i = 50; i <= pwmValue; i += 5) {
    motor1.forward(i);
    delay(50);
  }
  for (int i = pwmValue; i >= 50; i -= 5) {
    motor1.forward(i);
    delay(50);
  }
}

void pattern3() {
  int burstDuration = 100;

  motor1.forward(pwmValue);
  delay(burstDuration);
  motor1.brake();
  delay(burstDuration);
}

void pattern4() {
  int speed = random(50, pwmValue + 1);
  int duration = random(100, 500);

  motor1.forward(speed);
  delay(duration);
  motor1.brake();
  delay(duration);
}

void pattern5() {
  int lowSpeed = 50;
  int step = 10;
  for (int peakSpeed = 50; peakSpeed <= pwmValue; peakSpeed += step) {
    motor1.forward(peakSpeed);
    delay(200);
    motor1.forward(lowSpeed);
    delay(200);
  }
}

// No Pattern
void noPattern() {
  motor1.forward(pwmValue);
  digitalWrite(ledPin, HIGH);  // Turn on the LED
}

// Turn off the motor and LED
void offAll() {
  motor1.brake();
  digitalWrite(ledPin, LOW);  // Turn off the LED
}